{Requirements}

The main requirement for the system to work is JVM installed {https://www.oracle.com/technetwork/java/javase/downloads/}.
The system is tested on the hardware with i7-6700HQ CPU @ 2.60 GHz with 8 GB RAM. Minimum recommended RAM is 512MB.

{Dependencies}

The following dependencies are not included in the project and will need to be installed separately on the system:

- Java 8 from Oracle {https://www.oracle.com/technetwork/java/javase/downloads/}
- Eclipse IDE {https://www.eclipse.org/downloads/}


The following dependencies referenced in the project:

- Eclipse jdt 3.8 core library {http://download.eclipse.org/eclipse/updates/3.8/compositeArtifacts.jar}

- Java Parser 3.11 core library {https://jar-download.com/artifacts/com.github.javaparser}

- Guava library {https://github.com/google/guava/wiki/Release23}

{Files}
The list of the files from software zip file:
* "code2text.jar" - This Java jar file is located at the main folder. This file is a runnable jar
file for the project system. This file to run requires a source code directory to be pointed as
an argument.
* "code2text.bat" - This file is located at the main folder. This file is made to run the project
system from explorer window.
* "readme.txt" - This file is located at the main folder. This file summarises the content of
the software zip file.
* "Maintanance Manual.pdf"
--TextFromCode - This folder contains the Java project source code files.
* "/src/com/textfromcode/DataModelObj.java" - The Java class file to generate data objects
from the information parsed by JavaParser.
* "/src/com/textfromcode/DirExplorer.java" - The Java class file to find all of the java
source code files from pointed directories and sub-directories.
* "/src/com/textfromcode/NodeIterator.java" - The Java class file to iterate over the different
‘Nodes’ creted by the JavaParser to parse the source code.
* "/src/com/textfromcode/package-info.java" - The Java file contains the information about
the package automatically generated by Eclipse IDE.
* "/src/com/textfromcode/TFCmain.java" - The Java main file contains the parser implementation,
natural language generator and flowchart generator code. Most of the flowchart
generator code is commented out, because the implementation of this part is not finished.

{Running the Project System}

{Windows platform.}
The software system can be launched on the Windows platform from the `code2text.bat' file 
or from the command line launching the `code2text.jar' file.
Launching from `.bat' file:

1. To execute the system processing itself source code double click the `code2text.bat'
   in the explorer with the project folder open
2. To execute the system on a different project source code folder you need to change the argument 
   defined in a `.bat' file on the path to desired project folder.


        java -jar code2text.jar .\TextFromCode

        where the <.\TextFromCode> should be changed

        with the path to the desirable source code project folder.

        Example:
 
        java -jar code2text.jar C:\Some Folder\Project Folder
Launching from command prompt or `PowerShell':
1. Open command prompt or `PowerShell' window in a project folder

2. Launch the system on the project of your choice with the command:


        java -jar code2text.jar C:\Some Folder\Project Folder

        where the <C:\Some Folder\Project Folder> should be replaced

        with the path to the desirable source code project folder.


{Installation and running in Eclipse IDE}
To run the application inside Eclipse:

Import the project into Eclipse
File->Import->"Existing Project into Workspace"
->Next

Browse to the TextFromCode directory, click ok.

Tick the Search for nested projects

Click finish.

Then Run.

{Compiling from Eclipse IDE}
To create a new runnable JAR file in the workbench:
1. From the menu bar's File menu, select Export.
2. Expand the Java node and select Runnable JAR file. Click Next.
3. In the  Opens the Runnable JAR export wizard Runnable JAR File Specification page, select a 'Java Application' launch configuration to use to create a runnable JAR.
4. In the Export destination field, either type or click Browse to select a location for the JAR file.
5. Select Include libraries in a jar file.
Run jar file from command line or from bat file (Explained above).

ATTENTION!!! The generated text report file "nlgtext.txt" is generated in the main project folder.